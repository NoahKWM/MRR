knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
f <- ggplot(data.frame(x = c(-4, 4)), aes(x))
f + stat_function(fun = dnorm, colour = "cornflowerblue") +
stat_function(fun = dnorm, colour = "coral",args=list(sd=2))
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
install.packages(tidyverse)
library(glmnet)
?cv.glmnet
setwd('C:\\Users\\noahk\\Documents\\Perso\\Cours\\S3\\MERR\\MRR\\TP3')
knitr::opts_chunk$set(echo = TRUE)
# Load the dataset
tab <- read.csv(file = "cookies.csv", sep = ',', dec = '.', header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(tab$fat > median(tab$fat))
# Compute the features (mean, sd, slope, min, max) for each spectrum
features <- cbind(
mean = apply(tab[, -1], 1, mean),
sd = apply(tab[, -1], 1, sd),
slope = apply(tab[, -1], 1, function(x) lm(x ~ 1:length(x))$coefficients[2]),
min = apply(tab[, -1], 1, min),
max = apply(tab[, -1], 1, max)
)
# Load the dataset
tab <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(tab$fat > median(tab$fat))
# Compute the features (mean, sd, slope, min, max) for each spectrum
features <- cbind(
mean = apply(tab[, -1], 1, mean),
sd = apply(tab[, -1], 1, sd),
slope = apply(tab[, -1], 1, function(x) lm(x ~ 1:length(x))$coefficients[2]),
min = apply(tab[, -1], 1, min),
max = apply(tab[, -1], 1, max)
)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(tab$fat > median(cookies_data$fat))
# Computation (mean, standard deviation, minimum and maximum)
cookies_data$mean <- rowMeans(cookies_data[, 2:701])
cookies_data$stDev <- apply(cookies_data[, 2:701], 1, sd)
cookies_data$min <- apply(cookies_data[, 2:701], 1, min)
cookies_data$max <- apply(cookies_data[, 2:701], 1, max)
# Computation (slope)
# Function: compute_slope
# @param: spectrum_values of a cookie (here, column 2 to 701)
# @return: slope of the spectrum curve for a cookie
compute_slope <- function(spectrum_values) {
pos <- 1:length(spectrum_values)
lm_model <- lm(spectrum_values ~ pos)
slope <- coef(lm_model)[2]
return(slope)
}
cookies_data$slope <- apply(cookies_data[, 2:701], 1, compute_slope)
# Create a data frame with features and target variable
cookies_features_data <- data.frame(
mean = cookies_data$mean,
stDev = cookies_data$stDev,
min = cookies_data$min,
max = cookies_data$max,
slope = cookies_data$slope,
YBin = YBin
)
head(cookies_features_data)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(tab$fat > median(cookies_data$fat))
# Computation (mean, standard deviation, minimum and maximum)
cookies_data$mean <- rowMeans(cookies_data[, 2:701])
cookies_data$stDev <- apply(cookies_data[, 2:701], 1, sd)
cookies_data$min <- apply(cookies_data[, 2:701], 1, min)
cookies_data$max <- apply(cookies_data[, 2:701], 1, max)
# Computation (slope)
# Function: compute_slope
# @param: spectrum_values of a cookie (here, column 2 to 701)
# @return: slope of the spectrum curve for a cookie
compute_slope <- function(spectrum_values) {
pos <- 1:length(spectrum_values)
lm_model <- lm(spectrum_values ~ pos)
slope <- coef(lm_model)[2]
return(slope)
}
cookies_data$slope <- apply(cookies_data[, 2:701], 1, compute_slope)
# Create a data frame with features and target variable
cookies_features_data <- data.frame(
YBin = YBin,
mean = cookies_data$mean,
stDev = cookies_data$stDev,
min = cookies_data$min,
max = cookies_data$max,
slope = cookies_data$slope,
)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(tab$fat > median(cookies_data$fat))
# Computation (mean, standard deviation, minimum and maximum)
cookies_data$mean <- rowMeans(cookies_data[, 2:701])
cookies_data$stDev <- apply(cookies_data[, 2:701], 1, sd)
cookies_data$min <- apply(cookies_data[, 2:701], 1, min)
cookies_data$max <- apply(cookies_data[, 2:701], 1, max)
# Computation (slope)
# Function: compute_slope
# @param: spectrum_values of a cookie (here, column 2 to 701)
# @return: slope of the spectrum curve for a cookie
compute_slope <- function(spectrum_values) {
pos <- 1:length(spectrum_values)
lm_model <- lm(spectrum_values ~ pos)
slope <- coef(lm_model)[2]
return(slope)
}
cookies_data$slope <- apply(cookies_data[, 2:701], 1, compute_slope)
# Create a data frame with features and target variable
cookies_features_data <- data.frame(
YBin = YBin,
mean = cookies_data$mean,
stDev = cookies_data$stDev,
min = cookies_data$min,
max = cookies_data$max,
slope = cookies_data$slope
)
head(cookies_features_data)
?glm
# Fit logistic regression model
model <- glm(YBin ~ ., data = cookies_features_data, family = "binomial")
# Display the summary of the model
summary(model)
knitr::opts_chunk$set(echo = TRUE)
# Load the dataset
cookies_data <- read.table(file = "cookies.csv", header = TRUE)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(cookies_data$Y > median(cookies_data$Y))
# Spectra as predictors
spectra_predictors <- cookies_data[, 2:701]
# Fit logistic regression model
model <- glm(YBin ~ ., data = spectra_predictors, family = "binomial")
head(spectra_predictors)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(cookies_data$Y > median(cookies_data$Y))
# Spectra as predictors
spectra_predictors <- cookies_data[, 2:701]
# Add the YBin column to the predictors
spectra_predictors$YBin <- YBin
knitr::opts_chunk$set(echo = TRUE)
p1 <- predict.glm(model, type = "response")
knitr::opts_chunk$set(echo = TRUE)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(cookies_data$fat > median(cookies_data$fat))
# Computation (mean, standard deviation, minimum and maximum)
cookies_data$mean <- rowMeans(cookies_data[, 2:701])
cookies_data$stDev <- apply(cookies_data[, 2:701], 1, sd)
cookies_data$min <- apply(cookies_data[, 2:701], 1, min)
cookies_data$max <- apply(cookies_data[, 2:701], 1, max)
# Computation (slope)
# Function: compute_slope
# @param: spectrum_values of a cookie (here, column 2 to 701)
# @return: slope of the spectrum curve for a cookie
compute_slope <- function(spectrum_values) {
pos <- 1:length(spectrum_values)
lm_model <- lm(spectrum_values ~ pos)
slope <- coef(lm_model)[2]
return(slope)
}
cookies_data$slope <- apply(cookies_data[, 2:701], 1, compute_slope)
# Create a data frame with features and target variable
cookies_features_data <- data.frame(
YBin = YBin,
mean = cookies_data$mean,
stDev = cookies_data$stDev,
min = cookies_data$min,
max = cookies_data$max,
slope = cookies_data$slope
)
head(cookies_features_data)
print(YBin)
# Fit logistic regression model
model <- glm(YBin ~ ., data = cookies_features_data, family = "binomial")
# Display the summary of the model
summary(model)
p1 <- predict.glm(model, type = "response")
res <- as.numeric(p1 > 0.5)
print(res)
print(cookies_features_data$YBin)
table(cookies_features_data$Ybin, res)
res <- as.numeric(p1 > 0.5)
dim(res)
print(res)
length(res)
length(cookies_features_data$YBin)
table(cookies_features_data$YBin, res)
knitr::opts_chunk$set(echo = TRUE)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(cookies_data$fat > median(cookies_data$fat))
# Computation (mean, standard deviation, minimum and maximum)
cookies_data$mean <- rowMeans(cookies_data[, 2:701])
cookies_data$stDev <- apply(cookies_data[, 2:701], 1, sd)
cookies_data$min <- apply(cookies_data[, 2:701], 1, min)
cookies_data$max <- apply(cookies_data[, 2:701], 1, max)
# Computation (slope)
# Function: compute_slope
# @param: spectrum_values of a cookie (here, column 2 to 701)
# @return: slope of the spectrum curve for a cookie
compute_slope <- function(spectrum_values) {
pos <- 1:length(spectrum_values)
lm_model <- lm(spectrum_values ~ pos)
slope <- coef(lm_model)[2]
return(slope)
}
cookies_data$slope <- apply(cookies_data[, 2:701], 1, compute_slope)
# Create a data frame with features and target variable
cookies_features_data <- data.frame(
YBin = YBin,
mean = cookies_data$mean,
stDev = cookies_data$stDev,
min = cookies_data$min,
max = cookies_data$max,
slope = cookies_data$slope
)
head(cookies_features_data)
print(YBin)
# Fit logistic regression model
model <- glm(YBin ~ ., data = cookies_features_data, family = "binomial")
# Display the summary of the model
summary(model)
p1 <- predict.glm(model, type = "response")
res <- as.numeric(p1 > 0.5)
table(cookies_features_data$YBin, res)
p1 <- predict.glm(model, type = "response")
res <- as.numeric(p1 > 0.5)
table(cookies_features_data$YBin, res)
knitr::opts_chunk$set(echo = TRUE)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(cookies_data$fat > median(cookies_data$fat))
# Computation (mean, standard deviation, minimum and maximum)
cookies_data$mean <- rowMeans(cookies_data[, 2:701])
cookies_data$stDev <- apply(cookies_data[, 2:701], 1, sd)
cookies_data$min <- apply(cookies_data[, 2:701], 1, min)
cookies_data$max <- apply(cookies_data[, 2:701], 1, max)
# Computation (slope)
# Function: compute_slope
# @param: spectrum_values of a cookie (here, column 2 to 701)
# @return: slope of the spectrum curve for a cookie
compute_slope <- function(spectrum_values) {
pos <- 1:length(spectrum_values)
lm_model <- lm(spectrum_values ~ pos)
slope <- coef(lm_model)[2]
return(slope)
}
cookies_data$slope <- apply(cookies_data[, 2:701], 1, compute_slope)
# Create a data frame with features and target variable
cookies_features_data <- data.frame(
YBin = YBin,
mean = cookies_data$mean,
stDev = cookies_data$stDev,
min = cookies_data$min,
max = cookies_data$max,
slope = cookies_data$slope
)
head(cookies_features_data)
print(YBin)
# Fit logistic regression model
model <- glm(YBin ~ ., data = cookies_features_data, family = "binomial")
# Display the summary of the model
summary(model)
p1 <- predict.glm(model, type = "response")
res <- as.numeric(p1 > 0.5)
table(cookies_features_data$YBin, res)
p <- predict.glm(best_lambda_lasso, type = "response")
knitr::opts_chunk$set(echo = TRUE)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(cookies_data$fat > median(cookies_data$fat))
# Computation (mean, standard deviation, minimum and maximum)
cookies_data$mean <- rowMeans(cookies_data[, 2:701])
cookies_data$stDev <- apply(cookies_data[, 2:701], 1, sd)
cookies_data$min <- apply(cookies_data[, 2:701], 1, min)
cookies_data$max <- apply(cookies_data[, 2:701], 1, max)
# Computation (slope)
# Function: compute_slope
# @param: spectrum_values of a cookie (here, column 2 to 701)
# @return: slope of the spectrum curve for a cookie
compute_slope <- function(spectrum_values) {
pos <- 1:length(spectrum_values)
lm_model <- lm(spectrum_values ~ pos)
slope <- coef(lm_model)[2]
return(slope)
}
cookies_data$slope <- apply(cookies_data[, 2:701], 1, compute_slope)
# Create a data frame with features and target variable
cookies_features_data <- data.frame(
YBin = YBin,
mean = cookies_data$mean,
stDev = cookies_data$stDev,
min = cookies_data$min,
max = cookies_data$max,
slope = cookies_data$slope
)
head(cookies_features_data)
print(YBin)
# Fit logistic regression model
model <- glm(YBin ~ ., data = cookies_features_data, family = "binomial")
# Display the summary of the model
summary(model)
p1 <- predict.glm(model, type = "response")
res <- as.numeric(p1 > 0.5)
table(cookies_features_data$YBin, res)
# Load the dataset
cookies_data <- read.csv(file = "cookies.csv", header = TRUE)
# Create the binary target variable YBin
YBin <- as.numeric(cookies_data$fat > median(cookies_data$fat))
# Spectra as predictors (without fat column)
spectra_predictors <- cookies_data[, 2:701]
# Add the YBin column to the predictors
spectra_predictors$YBin <- YBin
head(spectra_predictors$YBin)
# Load the glmnet package
library(glmnet)
# Convert predictors and response to matrix format
X <- as.matrix(spectra_predictors[, -ncol(spectra_predictors)])  # Exclude the YBin column
y <- spectra_predictors$YBin
# Fit regularized logistic regression model (L1 penalty)
lambdas <- 10^seq(-4, -2, 0.01)
cv_model_lasso <- cv.glmnet(X, y, family = "binomial", alpha = 1, lambda = lambdas)
# Display the optimal lambda
best_lambda_lasso <- cv_model_lasso$lambda.min
cat("Optimal lambda for Lasso:", best_lambda_lasso, "\n")
plot(cv_model_lasso)
print(cv_model_lasso)
plot(cv_model_lasso$glmnet.fit, xvar = "lambda", main="Lasso Regression")
abline(h = 0, col = 6, lty = 3)
abline(v = log(best_lambda_lasso), col = 7, lty = 3)
legend("bottomleft", legend = c(colnames(X), "Zero", "Best Lambda"), col = 1:7, lty = 1)
best_model_lasso <- glmnet(X, y, family = "binomial", alpha = 1, lambda = best_lambda_lasso)
print(best_model_lasso)
p <- predict.glm(best_lambda_lasso, type = "response")
p <- predict.glm(best_lambda_lasso, type = "response")
p <- predict.glmnet(best_lambda_lasso, type = "response")
p <- predict.glm(best_lambda_lasso, type = "response")
p <- predict.glm(best_model_lasso, type = "response")
res <- as.numeric(p > 0.5)
table(y, res)
res <- as.numeric(p > 0.5)
table(y, res)
length(res)
print(p)
